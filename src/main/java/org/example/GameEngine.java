package org.example;

import java.util.*;

public class GameEngine {
    private List<PlayerInfo> players;
    private int currentPlayerIndex;
    private Random dice;
    private Board board;
    private Object PlayerInfo;

    public GameEngine(List<PlayerInfo> players, Board board) {
        this.players = players;
        this.board = board;
        this.currentPlayerIndex = 0;
        this.dice = new Random();
    }

    public GameEngine() {

    }

    public int rollDice() {
        return dice.nextInt(6) + 1;
    }

    public PlayerInfo getCurrentPlayer() {
        return players.get(currentPlayerIndex);
    }

    public void nextTurn() {
        currentPlayerIndex = (currentPlayerIndex + 1) % players.size();
    }

    public boolean canMoveOut(int diceRoll) {
        return diceRoll == 6;
    }

    public boolean movePawn(PlayerInfo player, int pawnIndex, int steps) {
        Pawn_UI pawn = player.getPawns().get(pawnIndex);

        // N·∫øu qu√¢n c·ªù c√≤n trong chu·ªìng
        if (pawn.isInBase()) {
            if (steps == 6) {  // N·∫øu ra ƒë∆∞·ª£c ngo√†i chu·ªìng, qu√¢n c·ªù di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ xu·∫•t ph√°t
                int startPos = board.getStartPosition(player);
                pawn.moveTo(board.getX(startPos), board.getY(startPos), startPos);
                return true; // Qu√¢n c·ªù ƒë√£ di chuy·ªÉn ra ngo√†i chu·ªìng
            } else {
                return false; // N·∫øu kh√¥ng ra ƒë∆∞·ª£c, qu√¢n kh√¥ng di chuy·ªÉn
            }
        }

        // Qu√¢n c·ªù ƒë√£ ra ngo√†i chu·ªìng, t√≠nh to√°n v·ªã tr√≠ m·ªõi
        int currentPos = pawn.getPositionIndex();
        int newPos = currentPos + steps; // T√≠nh v·ªã tr√≠ m·ªõi sau khi di chuy·ªÉn

        if (newPos > board.getEndPosition(player)) {
            return false; // N·∫øu qu√¢n c·ªù v∆∞·ª£t qu√° ƒë√≠ch, kh√¥ng di chuy·ªÉn
        }

        // Di chuy·ªÉn qu√¢n c·ªù
        pawn.moveTo(board.getX(newPos), board.getY(newPos), newPos);

        // Ki·ªÉm tra ƒÉn qu√¢n ƒë·ªëi ph∆∞∆°ng
        for (PlayerInfo other : players) {
            if (other != player) { // Ch·ªâ ki·ªÉm tra qu√¢n ƒë·ªëi ph∆∞∆°ng
                for (Pawn_UI otherPawn : other.getPawns()) {
                    // N·∫øu qu√¢n ƒë·ªëi ph∆∞∆°ng kh√¥ng ·ªü trong chu·ªìng v√† ·ªü v·ªã tr√≠ tr√πng v·ªõi qu√¢n ƒëang di chuy·ªÉn
                    if (!otherPawn.isInBase() && otherPawn.getPositionIndex() == newPos) {
                        // ƒÇn qu√¢n ƒë·ªëi ph∆∞∆°ng v√† ƒë∆∞a v·ªÅ chu·ªìng
                        otherPawn.moveTo(board.getBaseX(other, otherPawn), board.getBaseY(other, otherPawn), -1);
                        System.out.println(player.getName() + " ƒë√£ ƒÉn qu√¢n c·ªßa " + other.getName());
                    }
                }
            }
        }

        // Ki·ªÉm tra n·∫øu qu√¢n c·ªù ƒë√£ v·ªÅ ƒë√≠ch
        if (newPos == board.getEndPosition(player)) {
            System.out.println(player.getName() + " ƒë√£ ƒë∆∞a 1 qu√¢n v·ªÅ chu·ªìng!");

            // Ki·ªÉm tra ng∆∞·ªùi ch∆°i ƒë√£ th·∫Øng ch∆∞a
            if (checkWin(player)) {
                System.out.println(player.getName() + " ƒë√£ chi·∫øn th·∫Øng!");
                // B·∫°n c√≥ th·ªÉ g·ªçi ph∆∞∆°ng th·ª©c showLeaderboard ho·∫∑c l√†m g√¨ ƒë√≥ ƒë·ªÉ hi·ªÉn th·ªã chi·∫øn th·∫Øng
            }
        }

        return true;
    }


    public boolean checkWin(PlayerInfo player) {
        boolean isWinner = true;
        // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ qu√¢n c·ªßa ng∆∞·ªùi ch∆°i ƒë√£ v·ªÅ ƒë√≠ch
        for (Pawn_UI pawn : player.getPawns()) {
            if (pawn.getPositionIndex() != board.getEndPosition(player)) {
                isWinner = false;
                break; // N·∫øu c√≥ qu√¢n ch∆∞a v·ªÅ ƒë√≠ch, ng∆∞·ªùi ch∆°i ch∆∞a th·∫Øng
            }
        }

        if (isWinner) {
            System.out.println(player.getName() + " ƒë√£ chi·∫øn th·∫Øng!");
            // G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng v√† c√∫p v√†ng
            showLeaderboard(player);
        }

        return isWinner;
    }
    // Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng
    private void showLeaderboard(PlayerInfo winner) {
        List<PlayerInfo> rankedPlayers = new ArrayList<>(players);
        // S·∫Øp x·∫øp ng∆∞·ªùi ch∆°i d·ª±a tr√™n tr·∫°ng th√°i ho√†n th√†nh
        rankedPlayers.sort((p1, p2) -> {
            // So s√°nh v·ªã tr√≠ cu·ªëi c√πng c·ªßa qu√¢n c·ªù ƒë·ªÉ x·∫øp h·∫°ng
            int p1Score = 0;
            int p2Score = 0;
            for (Pawn_UI pawn : p1.getPawns()) {
                if (pawn.getPositionIndex() == board.getEndPosition(p1)) p1Score++;
            }
            for (Pawn_UI pawn : p2.getPawns()) {
                if (pawn.getPositionIndex() == board.getEndPosition(p2)) p2Score++;
            }
            return Integer.compare(p2Score, p1Score); // S·∫Øp x·∫øp gi·∫£m d·∫ßn
        });

        // In ra b·∫£ng x·∫øp h·∫°ng
        System.out.println("B·∫£ng x·∫øp h·∫°ng:");
        for (int i = 0; i < rankedPlayers.size(); i++) {
            PlayerInfo player = rankedPlayers.get(i);
            String rank = (i == 0) ? "ü•á" : (i == 1) ? "ü•à" : (i == 2) ? "ü•â" : "";
            System.out.println(rank + " " + player.getName() + (player == winner ? " - üèÜ C√∫p v√†ng!" : ""));
        }
    }

    public void initializeGame(List<PlayerInfo> players) {
            this.players = players;
            this.currentPlayerIndex = 0;
            System.out.println("Game ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!");
    }
}
